{"version":3,"sources":["webpack:///./src/components/Contact/Contact.js","webpack:///./src/pages/contact.js"],"names":["Contact","props","state","name","email","emailReal","message","human","handleChange","bind","handleSubmit","encode","data","Object","keys","map","key","encodeURIComponent","join","e","preventDefault","this","b","document","getElementById","disabled","value","style","transition","backgroundColor","theme","color","brand","primaryLight","borderColor","fetch","contactPostAddress","method","headers","body","then","rawResponse","json","response","console","log","result","navigate","error","alert","catch","setState","target","render","query","queryResults","site","siteMetadata","primary","primaryDark","action","onSubmit","data-netlify","type","onChange","display","required","id","React","Component","ContactPage","Fragment","Article","Headline","title","Seo","pageTitle"],"mappings":"qVAuNeA,E,oBA7Mb,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,CACXC,KAAM,GACNC,MAAO,GACPC,UAAW,GACXC,QAAS,GACTC,MAAO,IAGT,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,MACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,MAXH,E,kHAcnBE,OAAA,SAAOC,GACL,OAAOC,OAAOC,KAAKF,GAChBG,KAAI,SAAAC,GAAG,OAAIC,mBAAmBD,GAAO,IAAMC,mBAAmBL,EAAKI,OACnEE,KAAK,M,EAGVR,aAAA,SAAaS,GAEX,GADAA,EAAEC,iBACsB,IAApBC,KAAKnB,MAAME,MAIf,GAAwB,SAApBiB,KAAKnB,MAAMK,MAAf,CAMA,IAAMe,EAAIC,SAASC,eAAe,gBAClCF,EAAEG,UAAW,EACbH,EAAEI,MAAQ,aACVJ,EAAEK,MAAMC,WAAa,oBACrBN,EAAEK,MAAME,gBAAkBC,IAAMC,MAAMC,MAAMC,aAC5CX,EAAEK,MAAMO,YAAcJ,IAAMC,MAAMC,MAAMC,aACxCX,EAAEK,MAAMI,MAAQ,OAEhBI,MAAMd,KAAKe,mBAAoB,CAC7BC,OAAQ,OACRC,QAAS,CAAE,eAAgB,qCAC3BC,KAAMlB,KAAKV,OAAL,eACJ,YAAa,UACb,uBAAuB,GACpBU,KAAKnB,UAGTsC,MAAK,SAASC,GACb,OAAOA,EAAYC,UAEpBF,MAAK,SAASG,GACbC,QAAQC,IAAIF,GACW,WAAnBA,EAASG,QACXF,QAAQC,IAAI,2BACZE,YAAS,cAETH,QAAQI,MAAML,GACdM,MAAM,sDAGTC,OAAM,SAAAF,GACLJ,QAAQI,MAAMA,GACdC,MAAM,gEApCRA,MAAM,uH,EAwCVzC,aAAA,SAAaW,GAAI,IAAD,EACdE,KAAK8B,WAAL,MACGhC,EAAEiC,OAAOjD,MAAOgB,EAAEiC,OAAO1B,MAD5B,K,EAKF2B,OAAA,WAAU,IAAD,OACP,OACE,kBAAC,IAAD,CACAC,MAAK,aASLD,OAAS,SAAAE,GAKP,IAAMnB,EAAqBmB,EAAaC,KAAKC,aAAarB,mBAG1D,OAFA,EAAKA,mBAAqBA,EAGxB,oCACE,8DA4FoBN,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,gBAhGtC,SACE,0BACExD,KAAK,UACLkC,OAAO,OACPuB,OAAQxB,EACRyB,SAAU,EAAKnD,aACfoD,eAAa,OALf,qCA2FkBhC,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,iBAxFlC,gEAoFgB7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,gBAxFlC,gCACkB,6DAmFF7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBAtFhC,2BACEI,KAAK,OACL5D,KAAK,OACLuB,MAAO,EAAKxB,MAAMC,KAClB6D,SAAU,EAAKxD,aAJjB,qCAkFcsB,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,mBA/ElC,6DA2EgB7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBA/E7B,6DA2EW7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBA9ElC,gEA0EgB7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,gBA9ElC,kCACoB,6DAyEJ7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBA5EhC,2BACEI,KAAK,QACL5D,KAAK,YACLuB,MAAO,EAAKxB,MAAMG,UAClB2D,SAAU,EAAKxD,aAJjB,qCAwEcsB,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,mBArElC,6DAiEgB7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBArE7B,6DAiEW7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBApElC,2BACEI,KAAK,QACL5D,KAAK,QACLuB,MAAO,EAAKxB,MAAME,MAClB4D,SAAU,EAAKxD,aACfmB,MAAO,CAACsC,QAAS,QALnB,qCAgEgBnC,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBA7DlC,gEAyDgB7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,gBA7DlC,wBACU,6DAwDM7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBA3DhC,8BACExD,KAAK,UACL+D,UAAU,EACVxC,MAAO,EAAKxB,MAAMI,QAClB0D,SAAU,EAAKxD,aAJjB,qCAuDcsB,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,mBApDlC,6DAgDgB7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBApD7B,6DAgDW7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBAnDlC,gEA+CgB7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,gBAnDlC,yEAC2D,6DA8C3C7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBAjDhC,2BACEI,KAAK,QACL5D,KAAK,QACLuB,MAAO,EAAKxB,MAAMK,MAClByD,SAAU,EAAKxD,aAJjB,qCA6CcsB,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,mBA1ClC,6DAsCgB7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBA1C7B,6DAsCW7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBAzClC,2BACEI,KAAK,SACLrC,MAAM,SACNyC,GAAG,eAHL,qCAqCgBrC,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,gBAzClC,cAMwB,KAAvBvB,GACC,6DA8BcN,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,iBAlChC,kCA9DN,yoBA4FoB7B,IAAMC,MAAMC,MAAM0B,QA5FtC,qBA6F0B5B,IAAMC,MAAMC,MAAM0B,QA7F5C,oEAgGoB5B,IAAMC,MAAMC,MAAM2B,YAhGtC,8BA4FoB7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBApH5C,U,GA9EgBS,IAAMC,W,kBCmBbC,UAlBK,SAAArE,GAElB,OACE,kBAAC,IAAMsE,SAAP,KACI,kBAACC,EAAA,EAAD,CAAS1C,MAAOA,KACd,gCACE,kBAAC2C,EAAA,EAAD,CAAUC,MAAM,UAAU5C,MAAOA,OAEnC,kBAAC,EAAD,CAASA,MAAOA,OAEpB,kBAAC6C,EAAA,EAAD,CAAKC,UAAU,e","file":"component---src-pages-contact-js-0b6480892586a73c0d9a.js","sourcesContent":["/* eslint no-unused-vars: 0 */\n\nimport { navigate } from \"gatsby\";\nimport React from \"react\";\nimport { StaticQuery, graphql } from \"gatsby\";\n\nimport theme from \"../../theme/theme.yaml\";\n\nclass Contact extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      name: \"\",\n      email: \"\", // honeypot\n      emailReal: \"\",\n      message: \"\",\n      human: \"\"\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  encode(data) {\n    return Object.keys(data)\n      .map(key => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]))\n      .join(\"&\");\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.email != \"\") {\n      // This is an invisible honeypot field. Only bots will fill it.\n      return\n    }\n    if (this.state.human != \"human\") {\n      // Humans might make an error with this field, advise them.\n      alert(\"Bot check failed. Please write 'human' (without quotes) in the field just above the submit button, then try again.\")\n      return\n    }\n\n    const b = document.getElementById(\"submitButton\")\n    b.disabled = true\n    b.value = \"Sending...\"\n    b.style.transition = \"200ms ease-in-out\"\n    b.style.backgroundColor = theme.color.brand.primaryLight\n    b.style.borderColor = theme.color.brand.primaryLight\n    b.style.color = \"#666\"\n\n    fetch(this.contactPostAddress, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      body: this.encode({\n        \"form-name\": \"contact\",\n        \"javascript-detected\": true,\n        ...this.state \n      })\n    })\n      .then(function(rawResponse) {\n        return rawResponse.json();\n      })\n      .then(function(response) {\n        console.log(response)\n        if (response.result == 'success') {\n          console.log(\"Form submission success\");\n          navigate(\"/success\");\n        } else {\n          console.error(response);\n          alert(\"Server responded with error! Sorry about this.\")\n        }\n      })\n      .catch(error => {\n        console.error(error);\n        alert(\"Unable to deliver. Is your internet connection down?\")\n      });\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  render() {\n    return (\n      <StaticQuery\n      query={graphql`\n        query ContactQuery {\n          site {\n            siteMetadata {\n              contactPostAddress\n            }\n          }\n        }\n      `}\n      render={ queryResults => {\n\n        // It's very ugly to update this.contactPostAddress inside render(), but Gatsby currently\n        // offers only two ways of using StaticQuery: this way (inside render), and as a React Hook\n        // (which would be incompatible with a class component).\n        const contactPostAddress = queryResults.site.siteMetadata.contactPostAddress\n        this.contactPostAddress = contactPostAddress\n\n        return (\n          <>\n            <div className=\"form\">\n              <form\n                name=\"contact\"\n                method=\"post\"\n                action={contactPostAddress}\n                onSubmit={this.handleSubmit}\n                data-netlify=\"true\"\n              >\n                <label className=\"formItem\" >\n                  Name (optional):<br/>\n                  <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={this.state.name}\n                    onChange={this.handleChange}\n                  />\n                </label>\n                <br/><br/>\n                <label className=\"formItem\" >\n                  E-mail (optional):<br/>\n                  <input\n                    type=\"email\"\n                    name=\"emailReal\"\n                    value={this.state.emailReal}\n                    onChange={this.handleChange}\n                  />\n                </label>\n                <br/><br/>\n                <input\n                  type=\"email\"\n                  name=\"email\" // actually honeypot\n                  value={this.state.email}\n                  onChange={this.handleChange}\n                  style={{display: \"none\"}}\n                />\n                <label className=\"formItem\" >\n                  Message:<br/>\n                  <textarea\n                    name=\"message\"\n                    required={true}\n                    value={this.state.message}\n                    onChange={this.handleChange}\n                  />\n                </label>\n                <br/><br/>\n                <label className=\"formItem\" >\n                  If you are not a robot, then write \"human\" in this field:<br/>\n                  <input\n                    type=\"human\"\n                    name=\"human\"\n                    value={this.state.human}\n                    onChange={this.handleChange}\n                  />\n                </label>\n                <br/><br/>\n                <input\n                  type=\"submit\"\n                  value=\"Submit\"\n                  id=\"submitButton\"\n                  className=\"formItem\" \n                />\n                {contactPostAddress === \"\" && (\n                  <h1>Undefined contactPostAddress!</h1>\n                )}\n              </form>\n\n              {/* --- STYLES --- */}\n              <style jsx>{`\n                .formItem input,textarea {\n                  width: 100%;\n                  border-radius: 5px;\n                  border-width: 2px;\n                  font-family: Open Sans;\n                  font-weight: 400;\n                  font-size: 1em;\n                }\n                .formItem input {\n                  height: 30px;\n                  max-width: 300px;\n                }\n                .formItem textarea {\n                  height: 100px;\n                  max-width: 600px;\n                }\n                #submitButton {\n                  color: white;\n                  height: auto;\n                  font-family: Open Sans;\n                  font-size: 1.2em;\n                  font-weight: 400;\n                  padding: 0.5em 3em;\n                  border-radius: 5px;\n                  background: ${theme.color.brand.primary};\n                  border: 1px solid ${theme.color.brand.primary};\n                }\n                #submitButton:hover {\n                  background: ${theme.color.brand.primaryDark};\n                  cursor: pointer;\n                }\n              `}</style>\n            </div>\n          </>\n        )\n      }}\n      />\n    )\n  }\n};\n\nexport default Contact;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { graphql } from \"gatsby\";\nimport theme from \"../theme/theme.yaml\";\nimport Article from \"../components/Article\";\nimport Contact from \"../components/Contact\";\nimport Headline from \"../components/Article/Headline\";\nimport Seo from \"../components/Seo\";\n\nconst ContactPage = props => {\n\n  return (\n    <React.Fragment>\n        <Article theme={theme}>\n          <header>\n            <Headline title=\"Contact\" theme={theme} />\n          </header>\n          <Contact theme={theme} />\n        </Article>\n      <Seo pageTitle=\"Contact\"/>\n    </React.Fragment>\n  );\n};\n\nContactPage.propTypes = {\n};\n\nexport default ContactPage;\n"],"sourceRoot":""}